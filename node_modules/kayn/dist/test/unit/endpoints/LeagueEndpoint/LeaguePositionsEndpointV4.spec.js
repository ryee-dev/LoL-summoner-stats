'use strict';

var _chai = require('chai');

var _TestUtils = require('../../../TestUtils');

var _TestUtils2 = _interopRequireDefault(_TestUtils);

var _LeaguePositionsEndpointV = require('../../../../lib/Endpoints/LeagueEndpoint/LeaguePositionsEndpointV4');

var _LeaguePositionsEndpointV2 = _interopRequireDefault(_LeaguePositionsEndpointV);

var _mocks = require('../../../mocks');

var _mocks2 = _interopRequireDefault(_mocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { kaynInstance, defaultConfig } = _TestUtils2.default;

const { kayn, REGIONS, METHOD_TYPES } = kaynInstance;


describe('LeaguePositionsEndpointV4', function () {
    this.timeout(0);

    beforeEach(function () {
        this.LeaguePositions = new _LeaguePositionsEndpointV2.default(defaultConfig);
    });

    describe('.by.summonerID', function () {
        it('should have the correct payload #1', function () {
            const { payload } = this.LeaguePositions.by.summonerID('encryptedSummonerId');
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'league',
                endpoint: 'positions/by-summoner/encryptedSummonerId',
                query: [],
                region: '',
                isTournament: false,
                version: 4
            });
        });
    });

    describe.only('.list', function () {
        it('should have the correct payload #1', function () {
            const positionalQueue = 'RANKED_SOLO_5x5';
            const tier = 'DIAMOND';
            const division = 'I';
            const position = 'TOP';
            const page = 0;
            const { payload } = this.LeaguePositions.list(positionalQueue, tier, division, position, page);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'league',
                endpoint: `positions/${positionalQueue}/${tier}/${division}/${position}/${page}`,
                query: [],
                region: '',
                isTournament: false,
                version: 4
            });
        });

        it('should have the correct payload #2', function () {
            const positionalQueue = 'RANKED_SOLO_5x5';
            const tier = 'GOLD';
            const division = 'I';
            const position = 'JUNGLE';
            const page = 1;
            const { payload } = this.LeaguePositions.list(positionalQueue, tier, division, position, page);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'league',
                endpoint: `positions/${positionalQueue}/${tier}/${division}/${position}/${page}`,
                query: [],
                region: '',
                isTournament: false,
                version: 4
            });
        });

        it('should have the correct method name', function () {
            const positionalQueue = 'RANKED_SOLO_5x5';
            const tier = 'GOLD';
            const division = 'I';
            const position = 'JUNGLE';
            const page = 1;
            const { methodName } = this.LeaguePositions.list(positionalQueue, tier, division, position, page).region('na');
            (0, _chai.expect)(methodName).to.equal('LEAGUE.GET_ALL_POSITIONAL_LEAGUE_ENTRIES_V4');
        });
    });
});